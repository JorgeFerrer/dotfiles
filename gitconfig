[alias]
[core]
	excludesfile = /Volumes/Data/ncavanaugh/.gitignore
	quotepath = false
	# editor = mate -w
	autocrlf = input
[branch]
	autosetupmerge = true

[gui]
	recentrepo = /Volumes/Dev/Work/git/natecavanaugh/alloy
	recentrepo = /Volumes/Dev/Liferay/Trunk/Development/portal
[alias]
	# Same as add, but uses the verbose option since git add doesn't inform you of what exactly you just added
	aa = add -v
	# UTILS
	# Get the current branch name
	brn = "!f() { branch_name="$(git symbolic-ref HEAD 2>/dev/null)" || branch_name="(unnamed branch)"; branch_name=${branch_name##refs/heads/}; echo $branch_name; }; f"
	# getm = "!f() { git_dir="`basename $(git rev-parse --show-toplevel)`"; branch_name="master"; [[ "$git_dir" == *-ee-* ]] && branch_name=${git_dir/*-ee-/ee-}; echo "$branch_name"; }; f"
	# getm = "!f() {  }; f"
	# Get the last mentioned JIRA ticket id from the commit log
	get-latest-jira-id = "!f() { git log $1 --oneline | grep -Eo '([A-Z]{3,}-)([0-9]+)' -m 1; }; f"
	# Get a range based commit-ish based on the passed sha. Uses HEAD by default, but if a sha is passed, it creates a range
	# that refers to one previous. Ignores ranges, so that you can customize the range yourself.
	# Used in many aliases
	get-custom-refspec = "!f() { to_rev=${1:-HEAD}; [[ $to_rev == ^ ]] && to_rev=HEAD^..; old_head=${to_rev}^; new_head=$to_rev; if [[ $to_rev == *..* ]]; then old_head=${to_rev%%..*}; new_head=${to_rev#*..*}; fi; ref_spec=$old_head..$new_head; echo $ref_spec; }; f"

	# SHORTCUTS
	# Commit
	ci = commit
	# Commit w/ message
	cim = commit -m
	# Amend commit
	cia = commit --amend
	# Amend commit w/message
	ciam = commit --amend -m
	# Add changed files and then commit w/message
	cam = commit -a -m
	# Commit and add files
	ca = commit -a

	# camm and cimm, acts as cam and cim aliases
	# but automatically creates a message using the last JIRA ticket it can find (if any)
	# can take one optional parameter which is the message to use after the 
	# ticket ID (by default, this is "Source formatting")
	camm = "!f() { ticketId=$(git get-latest-jira-id $2); git commit -a -m \"$ticketId - ${1:-Source formatting}\"; }; f"
	cimm = "!f() { ticketId=$(git get-latest-jira-id $2); git commit -m \"$ticketId - ${1:-Source formatting}\"; }; f"

	# Checkout last branch
	col = checkout -
	# Branch
	br = branch
	# create a branch by name, or if it exists, checkout the branch
	cb = "!f() { git checkout -b $1 2> /dev/null && echo Created new branch $1 || `git checkout $1`; }; f"


	# Checkout
	co = checkout

	# st = status
	# lc = log ORIG_HEAD.. --stat --no-merges
	# sb = show-branch
	# wu = log origin/master..
	# wup = log -p origin/master..
	# save = stash && git-stash apply

	# Merge
	mg = merge
	# Abort merge
	mga = merge --abort
	# Merge master into current branch
	mm = merge `git getm`

	# Reset last commit
	pop = reset HEAD^
	# Adds all changed files into the last commit
	squish = commit -a --amend -C HEAD
	# Adds only staged files into the last commit
	squeeze = commit --amend -C HEAD
	
	# These are the same as cam, ca and squish, except it adds new files as well
	acam = !git add -A && git commit -m
	aca = !git add -A && git commit
	asquish = !git add -A && git commit --amend -C HEAD

	# Rebase
	rb = rebase
	# Abort rebase
	rba = rebase --abort
	# Continue rebase
	rbc = rebase --continue
	# Skip patch
	rbs = rebase --skip
	# Rebase interactively
	rbi = rebase -i
	# Rebase on top of master
	rbm = !git rebase $(git getm)
	# Rebase on top of master interactively
	rbim = rebase -i `git getm`

	# Reset
	rs = reset
	# Reset hard
	rsh = reset --hard
	# Reset soft
	rss = reset --soft

	# Pull request
	pr = pull-request
	# Show pull requests w/stats
	prs = pull-request stat
	# Submit pull request and close the current one
	prcs = !git pr submit -q && git pr close

	# lcid = rev-parse HEAD

	# Update submodules
	subu = submodule update
	# Update submodules and initialize them
	subi = submodule update --init

	# xc=!"git log $@"
	# db = "!sh -c 'git branch -D $0'"
	# db-remote = "!sh -c 'git push origin :$0'"
	# db-all = "!sh -c 'git db $0 && git db-remote $0'"

	# Delete the current local branch and checkout master
	cln = "!f() { local bn=$1; [[ -z $bn ]] && bn=$(git brn); master=`git getm`; [[ $bn == $master ]] && echo Cannot remove "$master" && exit; git co $master && git db $bn; }; f"

	# Delete a local branch
	db = branch -D
	# Delete a remote branch
	db-remote = !sh -c 'git push origin :$0'
	# Delete both the local and remote branches
	db-all = !sh -c 'git db $0 && git db-remote $0'

	# Delete a list of branches by a grep pattern. CAREFUL: this could delete a LOT of branches
	dbgrep = "!f() { local listresults=`git branch | awk '{ print $1 }' | grep -E $1`; [[ -z $2 ]] && for i in $listresults; do echo $i; done &&  echo Type -f at the end of the previous command to delete the listed branches; [[ -z $2 ]] && exit; [[ -n $1 ]] && for i in $listresults; do git branch -D $i; done; }; f"

	chp = "!f() { range=$1; from=$2; to=$3; [[ -z $range || -z $from || -z $to ]] && echo 'Please specify a commit range, a \"from\" directory and a \"to\" directory' && exit; local patch_name="$to/$range.patch"; local ref_spec=$(git get-custom-refspec $range); git diff -p --full-index $ref_spec > $patch_name; cd ${to}; out=$(git apply --whitespace=fix --binary --reject $patch_name 2>&1); rm $patch_name; cd - > /dev/null; echo $out | grep '^error'; }; f"

	# Patch a commit-ish to a specified dir
	patch-ee = "!f() { local output_dir='/Volumes/Dev/Liferay/EE/liferay-portal-ee-6.0.x'; local patch_name="$output_dir/$1.patch"; local ref_spec=$(git get-custom-refspec $1); git diff -p --full-index $ref_spec > $patch_name; cd ${output_dir}; out=$(git apply --whitespace=fix --binary --reject $patch_name 2>&1); rm $patch_name; cd - > /dev/null; echo $out | grep '^error'; }; f"
	# patch-ee = "!f() { local output_dir='/Volumes/Dev/Liferay/EE/liferay-portal-ee-6.0.x'; local patch_name="$output_dir/$1.patch"; local ref_spec=$(git get-custom-refspec $1); git diff -p --full-index $ref_spec > $patch_name; cd ${output_dir}; git apply -v --check $patch_name && git apply $patch_name && echo patch applied; cd - > /dev/null; }; f"
	# patch-ee = "!f() { local output_dir='/Volumes/Dev/Liferay/EE/liferay-portal-ee-6.0.x'; local patch_name="$output_dir/$1.patch"; git diff -p $1^ $1 > $patch_name; cd ${output_dir}; git apply --whitespace=fix --reject $patch_name; rm $patch_name; cd -; }; f"

	# Patch a commit-ish from the specified dir to the current repo
	rpatch-ee = "!f() { local output_dir='/Volumes/Dev/Liferay/EE/liferay-portal-ee-6.0.x'; local patch_name=$output_dir/$1.patch; local ref_spec=$(git get-custom-refspec $1); git diff -p --full-index $ref_spec > $patch_name; cd ${output_dir}; git apply --reject $patch_name && echo patch applied; cd - > /dev/null; }; f"


	# Syncs from upstream, then pushes the master branch to origin and upstream
	push-allm = "!master=`git getm`; git sync-origin $master && git push origin $master && git push upstream $master;"
	# Syncs from upstream, then pushes the master branch to origin and upstream
	push-all = "!f() { current_branch=$(git brn); git sync-origin $current_branch && git push origin $current_branch && git push upstream $current_branch; }; f"
	pa = !git push-all
	pam = !git push-allm
	pum = push upstream `git getm`
	# brn = name-rev --name-only HEAD
	

	pbo = !git push origin $(git brn)
	pu = pull upstream
	fu = fetch upstream
	# lg = "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
	# hd = !"git --no-pager log -1 --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset\n' --abbrev-commit --date=relative"
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(cyan)<%an>%Creset' --abbrev-commit --date=relative
	lgst = !git lg --stat $@
	lgm = !git lg `git getm`..
	lgg = "!f() { git lg --grep="$1"; }; f"
	lgs = "!f() { git lg -S"$1"; }; f"
	# lgs = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(cyan)<%an>%Creset' --abbrev-commit --date=relative --stat
	# hd = !git --no-pager lg -1
	hd = !git --no-pager log --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(cyan)<%an>%Creset' --abbrev-commit --date=relative -1
	head = !git log -n1
	m = !git co `git getm`
	# sp = stash pop
	# sp = !"git stash pop stash@{${1:-0}}"
	# sa = !"git  stash@{$@}"
	# sa = !"git stash apply stash@{${1:-0}}"
	sa = "!f() { local stash_rev=stash@{${1:-0}}; git stash apply $stash_rev;  }; f"
	sp = "!f() { local stash_rev=stash@{${1:-0}}; git stash pop $stash_rev;  }; f"
	ss = !git add . && git stash save
	sl = stash list
	bn = !git name-rev --name-only HEAD
	ls-ignored = ls-files --exclude-standard --ignored --others

	stats = shortlog -s -n

	# open batch of files
	bopen = "!f() { local ref_spec=$(git get-custom-refspec $1); editor=`git config --get user.editor`;files=`git diff --pretty=format: --name-only $ref_spec`;useopen=`command -v open`; usecygwin=`command -v cygstart`; [[ -n $useopen ]] && open -a \"$editor\" $files && exit $?; [[ -n $usecygwin ]] && editor=$(cygpath -d $editor); for i in $files; do echo opening $i; $usecygwin $editor $i; done }; f"

	# open each file individually
	open = "!f() { local ref_spec=$(git get-custom-refspec $1); editor=`git config --get user.editor`;files=`git diff --pretty=format: --name-only $ref_spec`;useopen=`command -v open`; usecygwin=`command -v cygstart`; [[ -n $useopen ]] && for i in $files; do echo opening $i; $useopen -a \"$editor\" $i; done && exit $?; [[ -n $usecygwin ]] && editor=$(cygpath -d $editor); for i in $files; do echo opening $i; $usecygwin $editor $i; done }; f"
	openm = !git open `git getm`..

	jira = "!f() { ticketId=$(git get-latest-jira-id $2); open http://issues.liferay.com/browse/$ticketId;  }; f"

	# GENERIC_FN = "!f() { }; f"

	# --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(cyan)<%an>%Creset'
	# --pretty=format:"%Cgreen%ci %Cblue%cr%Creset"
	# brs = "!f() { for k in `git branch|perl -pe s/^..//`; do echo `git log -1 --pretty=format:'%ci %Cred%cr %C(cyan)<%an>%Creset - %CgreenTOKEN%Creset' $k | sed s/TOKEN/$k/` $k;done | sort -r | cut -d' ' -f4-; }; f"

	# brs = "!f() { git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname) - %(committerdate:relative)' | cut -d / -f 3-; }; f"
	# brs = "!f() { git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname) - %(committerdate:relative)' | cut -d / -f 3- | awk -F" - " '{print "\033[32m" $1 "\033[39m - \033[36m" $2}'; }; f"
	ltr = brs
	# get-custom-refspec = "!f() { to_rev=${1:-HEAD}; [[ $to_rev == ^ ]] && to_rev=HEAD^..; old_head=${to_rev}^; new_head=$to_rev; if [[ $to_rev == *..* ]]; then old_head=${to_rev%%..*}; new_head=${to_rev#*..*}; fi; ref_spec=$old_head..$new_head; echo $ref_spec; }; f"
	delta = "!f() { ref_spec=$(git get-custom-refspec $1); git diff $ref_spec; }; f"
	dl = "!f() { ref_spec=$(git get-custom-refspec $1); git diff --stat $ref_spec; }; f"
	dlt = "!f() { ref_spec=$(git get-custom-refspec $1); git difftool -y -t Kaleidoscope $ref_spec; }; f"
	dltm = !git dlt `git getm`..
	refresh = "!f() { git co `git getm` && git db-all $1; git cb $1; }; f"
	# dlt = "!f() { ref_spec=$(git get-custom-refspec $1); git difftool -y -t Kaleidoscope $ref_spec; }; f"
	# dlt = "!f() { ref_spec=$(git get-custom-refspec $1); git difftool -y -t opendiff $ref_spec; }; f"
	# dlt = "!f() { ref_spec=$(git get-custom-refspec $1); git diffall $ref_spec; }; f"
	# move all commits after the passed one to a new branch
	# git split 5c29ab4 custom-feature
	split = "!f() { git checkout -b $2 && msg=$(git stash save) && git checkout - && git reset --hard $1 && git checkout $2 && [[ ! $msg =~ ^'No local changes to save'$ ]] && git stash pop; }; f"
	dt = difftool
	dtc = difftool --cached

	ldl = "!f() { local ref_spec=$(git get-custom-refspec $1); git diff --pretty='format:' --name-only $ref_spec; }; f"
	# open = "!f() { editor=`git config --get user.editor`;option='';useopen=`command -v open`; usecygwin=`command -v cygstart`; useopen=`command -v open`; usecygwin=`command -v cygstart`; [[ -n "$useopen" ]] && customopen="$useopen" || customopen="$usecygwin"; echo $customopen; [[ -n "$usecygwin" ]] && editor=$(cygpath -d "$editor"); [[ -n "$editor" && -n "$useopen" ]] && option='-a '; for i in `git show --pretty="format:" --name-only $1`; do echo "opening $i"; $customopen $option$editor $i; done }; f"
	#open = "!f() { editor='C:\Program Files\EditPlus 3\editplus.exe';files=`ls *.txt`;useopen=`command -v open`; usecygwin=`command -v cygstart`; [[ -n "$useopen" ]] && $files | xargs open -a $editor && exit $?; [[ -n "$usecygwin" ]] && editor=$(cygpath -d "$editor"); for i in $files; do echo "opening $i"; $usecygwin $editor $i; done }; f"
	#open = "!f() { editor='C:\Program Files\EditPlus 3\editplus.exe';option='';useopen=`command -v open`; usecygwin=`command -v cygstart`; useopen=`command -v open`; usecygwin=`command -v cygstart`; [[ -n "$useopen" ]] && customopen="$useopen" || customopen="$usecygwin"; echo $customopen; [[ -n "$usecygwin" ]] && editor=$(cygpath -d "$editor"); [[ -n "$editor" && -n "$useopen" ]] && option='-a '; files=`ls *.txt`; for i in $files; do echo "opening $i"; $customopen $option$editor $i; done }; f"

	# sync-origin="!sh -c 'git pull upstream $0 && git push origin $0'"
	so = !git sync-origin $(git getm)
	sbo = !git sync-origin $(git brn)
	ubo = !git pull origin $(git brn)
	# git stash save && git checkout master && git sync-origin && git checkout -
	som = "!f() { local current_branch=$(git name-rev --name-only HEAD); local saved_index=0; local stash_save_result=`git stash save`; [[ $stash_save_result == *\"HEAD is now at\"* ]] && saved_index=1; master=$(git getm); git checkout $master && git sync-origin $master && git checkout $current_branch && ([[ $saved_index == 1 ]]) && git stash pop; }; f;"
	pc = !git pull-request close
	po = !git pull-request open $1
	p = !git pull-request $@
	ps = !git pull-request submit

[color]
	ui = auto
